()
#

( )
#

true
#

false
#

3
#

-1
#

-10
#

0
#

x
#

x + 1
#

xyz_zyx - 2
#

1 + 2 - 3
#

1 * 2 - 3 / 4
#

x = 3
#

x * 4 = y / 3
#

(x * 4) = (y / 3)
#

let x = 1 in let f = proc (y) (x + y) in let x = 2 in let g = proc (y) (x + y) in  (f 1) + (g 1)
#

letrec double(x) = if (x = 0) then 0 else (double (x-1) + 2) in (double 6)
#

letrec even(x) = if (x = 0) then true else odd(x-1) and odd(x) = if (x = 0) then false else even(x-1) in (even 13)
#

letrec factorial(x) =if (x = 0) then 1 else factorial(x-1) * x in letrec loop n =if (n = 0) then () else (print (factorial n); loop (n-1)) in (loop 10)
#

letrec range(n) =if (n = 1) then (cons 1 nil)else n::(range (n-1))in (range 10)
#

letrec reverse(l) =if (isnil l) then []else (reverse (tail l)) @ (cons (head l) nil)in (reverse (cons (1, cons (2, cons (3, nil)))))
#

let fix = proc (f) ((proc (x) f (proc (y) ((x x) y)))(proc (x) f (proc (y) ((x x) y))))in let f = fix (proc (f) (proc (x) (if (x = 0) then 1 else f(x-1) * x)))in (f 10)
#

let fix = proc (f) ((proc (x) f (proc (y) ((x x) y)))(proc (x) f (proc (y) ((x x) y))))in let f = fix (proc (range)(proc (n)(if (n = 1) then (cons 1 nil)else n::(range (n-1)))))in (f 10)
#
