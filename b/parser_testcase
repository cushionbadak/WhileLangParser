()
#

( )
#

true
#

false
#

3
#

-1
#

-10
#

0
#

x
#

x + 1
#

xyz_zyx - 2
#

1 + 2 - 3
#

1 * 2 - 3 / 4
#

x = 3
#

x * 4 = y / 3
#

(x * 4) = (y / 3)
#

((1 + 3) = (12 / (4 - 1)))
#

if true then (if (1=2) then 1 else 0) else 0
#

if not true then 0 else (if not true then -1 else 1)
#

if (1+3)=(12/(4-1)) then true else false
#

x := 1; x
#

let ret=1 in let n=5 in while(0<n){ret:=ret*n; n:=n-1}; ret
#

let x=2 in x:=1;x
#

let proc f(x) = y+1 in let y = 1 in f<y>
#

let proc f(x1,x2) = x1:=3; x2:=3 in let x1 = 1 in let x2 = 1 in f(x1,x2); x1+x2
#

let proc f(x1,x2) = x1:=3; x2:=3 in let x1 = 1 in let x2 = 1 in f<x1,x2>; x1+x2
#

let proc f(x1,x2) = x1+x2 in f(1,x1) 
#

let x=1 in let y=2 in let proc f(x1,x2) = x1:=x1*2; x2:=x2+2; x1+x2 in f<x,y>; let r = x+y in r+f(x,y) 
#

let n=5 in let sum = 0 in let proc calc() = while(not(n=0)){sum:=sum+n;n:=n-1} in calc<>;sum
#

if n=0 then () else (x:=x+1; n:=n-1; f<x>)
#

if (n=0) then () else (x:=x+1; n:=n-1; f<x>)
#

let n = 10 in let proc f(x) = if (n=0) then () else (x:=x+1;n:=n-1;f<x>) in let x = 10 in f<x>;x
#

let x = 5 in let y = 5 in let proc f(n) = n:=n+1;() in (f<x>;x)+(f(y);y)
#

let proc swap(a,b) = let temp = a in a:=b;b:=temp in let x = 1 in let y = 2 in swap<x,y>;x
#

let f = {} in f; f.f
#
  
{id:=123, pw:=123};id
#

{id:=123, pw:=123}.id
#

let x = 5 in x.x
#

let f = {x:=true, y:=false} in f.y:= not (not true);f.y
#
  
{x:=1,y:=x}
#

let x = 1 in let f = {x:=1, y:=x} in f.y
#
  
let x = {x:=5,y:=7} in x.x:=x.x+x.y; x.x
#

let f = {x:=10,y:=13} in let proc swap(a,b) = let temp = a in a:=b;b:=temp in swap(f.x,f.y);f.x
#

let num = {n:=5, is_even:=false} in let proc f(n) = while (0=n.n) {n.is_even:=not(n.is_even);n.n:=n.n-1} in f<num>;num.is_even
#
